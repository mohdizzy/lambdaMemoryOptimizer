service: ${file(../../defaults.yml):service}

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "eu-west-1"}
  stackTags: ${self:custom.tags}  

plugins:
  - serverless-scriptable-plugin

custom:
  tags: ${file(../../defaults.yml):custom.tags}
  kdaApplicationName: ${self:service}-${self:provider.stage}-kda
  base: ${self:service}-${self:provider.stage}
  params: ${file(../../defaults.yml):custom.params.${self:provider.stage}}
  scriptHooks:
    after:aws:deploy:finalize:cleanup: ./startkda.js

resources:
  Resources:
    cepKdaFlinkLambdaMetricsApplicationV2:
      Type: 'AWS::KinesisAnalyticsV2::Application'
      Properties:
        ApplicationName: ${self:custom.kdaApplicationName}
        RuntimeEnvironment: FLINK-1_15
        ServiceExecutionRole: !GetAtt 
          - cepFlinkLambdaMetricsServiceExecutionRole
          - Arn
        ApplicationConfiguration:
          FlinkApplicationConfiguration:
            MonitoringConfiguration:
              ConfigurationType: CUSTOM
              MetricsLevel: ${self:custom.params.MetricsLevel}
              LogLevel: ${self:custom.params.LogLevel}
            ParallelismConfiguration:
              ConfigurationType: CUSTOM
              Parallelism: ${self:custom.params.Parallelism}
              ParallelismPerKPU: ${self:custom.params.ParallelismPerKPU}
              AutoScalingEnabled: ${self:custom.params.AutoScalingEnabled}
            CheckpointConfiguration:
                CheckpointingEnabled: ${self:custom.params.CheckpointingEnabled}
                CheckpointInterval: ${self:custom.params.CheckpointInterval}
                ConfigurationType: CUSTOM
                MinPauseBetweenCheckpoints: ${self:custom.params.MinPauseBetweenCheckpoints}
          ApplicationCodeConfiguration:
            CodeContent:
              S3ContentLocation:
                BucketARN: 
                  Fn::ImportValue: ${file(../../defaults.yml):service}-bucket-${self:provider.stage}-s3-arn
                FileKey: ${self:custom.params.FileKey}
            CodeContentType: ZIPFILE
          ApplicationSnapshotConfiguration:
            SnapshotsEnabled: true
          EnvironmentProperties:
            PropertyGroups:
              - PropertyGroupId: SourceKinesis
                PropertyMap:
                  name: ${cf:flink-lambda-log-kinesis-${self:provider.stage}.StreamName}
              - PropertyGroupId: DestinationKinesis
                PropertyMap:
                  name: ${cf:flink-lambda-log-kinesis-${self:provider.stage}.DestinationStreamName}

    cepFlinkCWLoggingOption:
      Type: 'AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption'
      Properties:
        ApplicationName: !Ref cepKdaFlinkLambdaMetricsApplicationV2
        CloudWatchLoggingOption:
          LogStreamARN: !Join 
            - ':'
            - - 'arn:aws:logs'
              - !Ref 'AWS::Region'
              - !Ref 'AWS::AccountId'
              - log-group
              - !Ref cepFlinkLambdaMetricsCWLogGroup
              - log-stream
              - !Ref cepFlinkLambdaMetricsCWLogStream
          
    cepFlinkLambdaMetricsCWLogGroup: 
      Type: AWS::Logs::LogGroup
      Properties: 
        RetentionInDays: ${self:custom.params.RetentionInDays}
        LogGroupName: ${self:custom.params.LogGroupName}

    cepFlinkLambdaMetricsCWLogStream: 
      Type: AWS::Logs::LogStream
      Properties: 
        LogGroupName: 
          Ref: cepFlinkLambdaMetricsCWLogGroup
        LogStreamName: ${self:custom.params.LogStreamName}

    cepFlinkLambdaMetricsServiceExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: kinesisanalytics.amazonaws.com
              Action: 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: Open
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogGroups
                    - logs:DescribeLogStreams
                  Resource: '*'     
                - Effect: Allow
                  Action: 
                    - kinesis:*
                    - logs:PutDestination
                    - logs:CreateLogDelivery
                    - logs:PutResourcePolicy
                    - s3:ListStorageLensConfigurations
                    - s3:GetAccessPoint
                    - s3:GetAccountPublicAccessBlock
                    - s3:ListAllMyBuckets
                    - s3:ListAccessPoints
                    - s3:ListJobs
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - logs:PutMetricFilter
                    - logs:CreateLogStream
                    - logs:PutSubscriptionFilter
                    - logs:PutRetentionPolicy
                    - logs:CreateLogGroup
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - s3:GetLifecycleConfiguration
                    - s3:GetBucketTagging
                    - s3:GetInventoryConfiguration
                    - s3:GetObjectVersionTagging
                    - s3:ListBucketVersions
                    - s3:GetBucketLogging
                    - s3:ListBucket
                    - s3:GetAccelerateConfiguration
                    - s3:GetBucketPolicy
                    - s3:GetStorageLensConfigurationTagging
                    - s3:GetObjectVersionTorrent
                    - s3:GetObjectAcl
                    - s3:GetEncryptionConfiguration
                    - s3:GetBucketObjectLockConfiguration
                    - s3:GetBucketRequestPayment
                    - s3:GetAccessPointPolicyStatus
                    - s3:GetObjectVersionAcl
                    - s3:GetObjectTagging
                    - s3:GetMetricsConfiguration
                    - s3:GetBucketOwnershipControls
                    - s3:GetBucketPublicAccessBlock
                    - s3:GetBucketPolicyStatus
                    - s3:ListBucketMultipartUploads
                    - s3:GetObjectRetention
                    - s3:GetBucketWebsite
                    - s3:GetJobTagging
                    - s3:GetBucketVersioning
                    - s3:GetBucketAcl
                    - s3:GetObjectLegalHold
                    - s3:GetBucketNotification
                    - s3:GetReplicationConfiguration
                    - s3:ListMultipartUploadParts
                    - s3:GetObject
                    - s3:GetStorageLensConfiguration
                    - s3:GetObjectTorrent
                    - s3:DescribeJob
                    - s3:GetBucketCORS
                    - s3:GetAnalyticsConfiguration
                    - s3:GetObjectVersionForReplication
                    - s3:GetBucketLocation
                    - s3:GetAccessPointPolicy
                    - s3:GetObjectVersion
                    - s3:GetStorageLensDashboard
                  Resource: '*'
  
  Outputs:
    cepFlinkLambdaMetricsApplication:
      Description: Flink lambda log application
      Value: 
        Ref: cepKdaFlinkLambdaMetricsApplicationV2
      Export:
        Name: ${self:custom.kdaApplicationName}